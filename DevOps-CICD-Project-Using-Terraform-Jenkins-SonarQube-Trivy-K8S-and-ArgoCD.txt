Video --- https://youtu.be/Ybx_CGiEKZ4
=============================================================================================================================================================================================================================
[A] Let's use Terraform to create an EC2 instance for Jenkins, Docker and SonarQube
1--main.tf
resource "aws_instance" "web" {
  ami                    = "ami-0287a05f0ef0e9d9a"      #change ami id for different region
  instance_type          = "t2.large"
  key_name               = "Linux-VM-Key7"              #change key name as per your setup
  vpc_security_group_ids = [aws_security_group.Jenkins-VM-SG.id]
  user_data              = templatefile("./install.sh", {})

  tags = {
    Name = "Jenkins-SonarQube"
  }

  root_block_device {
    volume_size = 40
  }
}
resource "aws_security_group" "Jenkins-VM-SG" {
  name        = "Jenkins-VM-SG"
  description = "Allow TLS inbound traffic"

  dynamic "ingress" {
    for_each = [22, 80, 443, 8080, 9000, 3000]
    content {
      description      = "inbound rule for port ${ingress.value}"
      from_port        = ingress.value
      to_port          = ingress.value
      protocol         = "tcp"
      cidr_blocks      = ["0.0.0.0/0"]
      ipv6_cidr_blocks = []
    }
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "Jenkins-VM-SG"
  }
}


2--provider.tf
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}
# Configure the AWS Provider
provider "aws" {
  region = "ap-south-1"     #change region as per you requirement
}

3--install.sh
#!/bin/bash
sudo apt update -y
wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
sudo apt update -y
sudo apt install openjdk-17-jdk
/usr/bin/java --version
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt-get install jenkins -y
sudo systemctl start jenkins
sudo systemctl status jenkins

##Install Docker and Run SonarQube as Container
sudo apt-get update
sudo apt-get install docker.io -y
sudo usermod -aG docker ubuntu
sudo usermod -aG docker jenkins  
newgrp docker
sudo chmod 777 /var/run/docker.sock
docker pull sonarqube:latest
docker run -d --name sonar1 -p 9000:9000 sonarqube:latest

#install trivy
sudo apt-get install wget apt-transport-https gnupg lsb-release -y
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
sudo apt-get update
sudo apt-get install trivy -y


4--
terraform init, terraform plan, terraform apply -auto-approve

=============================================================================================================================================================================================================================
Refer---https://archive.eksworkshop.com/intermediate/290_argocd/install/
Refer--https://github.com/aws-samples/eks-workshop/issues/734
[B] Create AWS EKS Cluster
1--Install kubectl on Jenkins Server
 sudo apt update
 sudo apt install curl
 curl -LO https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
 sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
 kubectl version --client

2--Install AWS Cli

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
sudo apt install unzip
unzip awscliv2.zip
sudo ./aws/install
aws --version

3--Installing  eksctl

curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
cd /tmp
sudo mv /tmp/eksctl /bin
eksctl version

4--Setup Kubernetes using eksctl
eksctl create cluster --name virtualtechbox-cluster \
--region ap-south-1 \
--node-type t2.small \
--nodes 3 \

5-- Verify Cluster with below command
$ kubectl get nodes
=============================================================================================================================================================================================================================
[C] Setup Monitoring for Kubernetes using Helm, Prometheus and Grafana Dashboard
1 ) Install Helm Chart
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh
helm version

2 )
helm repo add stable https://charts.helm.sh/stable                    //add the Helm Stable Charts for your local client

helm repo add prometheus-community https://prometheus-community.github.io/helm-charts                      //Add Prometheus Helm repo

kubectl create namespace prometheus                    //Create Prometheus namespace

helm install stable prometheus-community/kube-prometheus-stack -n prometheus              //Install Prometheus

kubectl get pods -n prometheus       //check whether Prometheus is installed or not 

kubectl get svc -n prometheus        //check the services file (svc) of the Prometheus

//Grafana will be coming along with Prometheus as the stable version

3 ) let’s expose Prometheus to the external world

kubectl edit svc stable-kube-prometheus-sta-prometheus -n prometheus                 //change it from Cluster IP to LoadBalancer.change port & targetport to 9090, save and close

kubectl get svc -n prometheus    //copy dns name of LB and browse with 9090

4 ) let’s change the SVC file of the Grafana and expose it to the outer world

kubectl edit svc stable-grafana -n prometheus            //change it from Cluster IP to LoadBalancer

kubectl get svc -n prometheus         //copy dns name of LB and browse

kubectl get secret --namespace prometheus stable-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo           //use this command to get the password. the user name is admin

5) Import dashboard - 15760 - Load - Select Prometheus  & Click Import. 
6) Import dashboard - 12740 - Load - Select Prometheus  & Click Import. 
=============================================================================================================================================================================================================================
Refer---https://argo-cd.readthedocs.io/en/stable/cli_installation/
[D] ArgoCD Installation on Kubernetes Cluster and Add EKS Cluster to ArgoCD
1 ) First, create a namespace
    $ kubectl create namespace argocd

2 ) Next, let's apply the yaml configuration files for ArgoCd
    $ kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

3 ) Now we can view the pods created in the ArgoCD namespace.
    $ kubectl get pods -n argocd

4 ) To interact with the API Server we need to deploy the CLI:
    $ sudo curl --silent --location -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.4.7/argocd-linux-amd64
    $ sudo chmod +x /usr/local/bin/argocd
      
5 ) Expose argocd-server
    $ kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

6 ) Wait about 2 minutes for the LoadBalancer creation
    $ kubectl get svc -n argocd

7 ) Get pasword and decode it and login to ArgoCD on Browser. Go to user info and change the password
    $ kubectl get secret argocd-initial-admin-secret -n argocd -o yaml
    $ echo WXVpLUg2LWxoWjRkSHFmSA== | base64 --decode

8 ) login to ArgoCD from CLI
    $ argocd login a2255bb2bb33f438d9addf8840d294c5-785887595.ap-south-1.elb.amazonaws.com --username admin,    provide the password which you set above

9 ) Check available clusters in ArgoCD
     $ argocd cluster list

10 ) Below command will show the EKS cluster details
     $ kubectl config get-contexts

11 ) Add above EKS cluster to ArgoCD with below command
     $ argocd cluster add i-08b9d0ff0409f48e7@virtualtechbox-cluster.ap-south-1.eksctl.io --name virtualtechbox-eks-cluster
     
12 ) Now if you give command "$ argocd cluster list" you will get both the clusters EKS & AgoCD(in-cluster). This can be verified at ArgoCD Dashboard.
=============================================================================================================================================================================================================================
[E] Verify the CI/CD Pipeline
git config --global user.name "Ashfaque.Shaikh"
git config --global user.email "ashfaque.s510@gmail.com"
git clone https://github.com/Ashfaque-9x/a-reddit-clone.git
=============================================================================================================================================================================================================================
[F] Cleanup
1--Delete namespace prometheus & argocd
$ kubectl delete namespace prometheus  and $ kubectl delete namespace argocd
2--Delete EKS Cluster
$ eksctl delete cluster virtualtechbox-cluster --region ap-south-1     OR    eksctl delete cluster --region=ap-south-1 --name=virtualtechbox-cluster
3--Delete EC2 Instance with below Terraform Command
terraform destroy
 vi install.sh
    2  ./install.sh
    3  chmod 777 install.sh
    4  ./install.sh
    5  rm -rf *
    6  vi ins.sh
    7  chmod ins.sh
    8  chmod 777 ins.sh
    9  ls
   10  ./ins.sh
   11  #!/bin/bash
   12  # Define variables
   13  SONAR_VERSION="9.2"  # Replace with the desired version
   14  JAVA_VERSION="java-11-openjdk"
   15  # Download SonarQube
   16  wget "https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-${SONAR_VERSION}.zip"
   17  unzip "sonarqube-${SONAR_VERSION}.zip"
   18  rm "sonarqube-${SONAR_VERSION}.zip"
   19  mv "sonarqube-${SONAR_VERSION}" sonarqube
   20  # Install Java (if not already installed)
   21  if ! command -v java &> /dev/null; then     echo "Java not found. Installing..."
   22      sudo yum install -y $JAVA_VERSION; fi
   23  # Configure Java
   24  export JAVA_HOME=/usr/lib/jvm/$JAVA_VERSION
   25  # Start SonarQube
   26  cd sonarqube/bin/linux-x86-64/
   27  ./sonar.sh start
   28  yum install wget -yum
   29  yum install wget
   30  SONAR_VERSION="9.2"
   31  JAVA_VERSION="java-11-openjdk"
   32  wget "https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-${SONAR_VERSION}.zip"
   33  unzip "sonarqube-${SONAR_VERSION}.zip"
   34  SONAR_VERSION="9.2"  # Replace with the desired version
   35  JAVA_VERSION="java-11-openjdk"
   36  # Download SonarQube
   37  wget "https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-${SONAR_VERSION}.zip"
   38  unzip "sonarqube-${SONAR_VERSION}.zip"
   39  rm "sonarqube-${SONAR_VERSION}.zip"
   40  mv "sonarqube-${SONAR_VERSION}" sonarqube
   41  sudo yum update -y
   42  sudo yum install wget unzip -y
   43  sysctl vm.max_map_count
   44  sysctl fs.file-max
   45  ulimit -n
   46  ulimit -u
   47  ls
   48  yum install wget
   49  vi ins.sh
   50  ./ins.sh
   51  cat ins.sh
   52  #!/bin/bash
   53  SONAR_VERSION="9.2" # Replace with the desired version
   54  JAVA_VERSION="java-11-openjdk-devel" # Adjusted for Amazon Linux
   55  # Navigate to the installation directory
   56  cd /opt
   57  # Download SonarQube
   58  wget "https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-${SONAR_VERSION}.zip"
   59  unzip "sonarqube-${SONAR_VERSION}.zip"
   60  rm "sonarqube-${SONAR_VERSION}.zip"
   61  mv "sonarqube-${SONAR_VERSION}" sonarqube
   62  # Install Java (if not already installed)
   63  if ! command -v java &> /dev/null; then     echo "Java not found. Installing...";     sudo yum install -y $JAVA_VERSION; fi
   64  # Configure Java
   65  export JAVA_HOME=/usr/lib/jvm/$JAVA_VERSION
   66  # Start SonarQube
   67  cd sonarqube/bin/linux-x86-64/
   68  sudo ./sonar.sh start
   69  #!/bin/bash
   70  SONAR_VERSION="9.2" # Replace with the desired version
   71  JAVA_VERSION="java-11-openjdk-devel" # Adjusted for Amazon Linux
   72  # Navigate to the installation directory
   73  cd /opt
   74  # Download SonarQube
   75  wget "https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-${SONAR_VERSION}.zip"
   76  if [ $? -ne 0 ]; then     echo "Error: Failed to download SonarQube version $SONAR_VERSION";     exit 1; fi
   77  vi inss.sh
   78  chmod 777 inss.sh
   79  ./ inss.sh
   80  ls
   81  ./ inss.sh
   82  ./inss.sh
   83  sudo su
   84  sudo su
   85  ls
   86  cd /opt
   87  ls
   88  cd
   89  wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.8.zip
   90  wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.1.zip
   91  wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.1.zip
   92  #!/bin/bash
   93  SONAR_VERSION="9.2" # Replace with the desired version
   94  JAVA_VERSION="java-11-openjdk-devel" # Adjusted for Amazon Linux
   95  # Navigate to the installation directory
   96  cd /opt
   97  # Download SonarQube
   98  wget "https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-${SONAR_VERSION}.zip"
   99  unzip "sonarqube-${SONAR_VERSION}.zip"
  100  rm "sonarqube-${SONAR_VERSION}.zip"
  101  mv "sonarqube-${SONAR_VERSION}" sonarqube
  102  # Install Java (if not already installed)
  103  if ! command -v java &> /dev/null; then     echo "Java not found. Installing...";     sudo yum install -y $JAVA_VERSION; fi
  104  # Configure Java
  105  export JAVA_HOME=/usr/lib/jvm/$JAVA_VERSION
  106  # Start SonarQube
  107  cd sonarqube/bin/linux-x86-64/
  108  sudo ./sonar.sh start
  109  ls
  110  cd
  111  ls
  112  rm -rf *
  113  vi in.sh
  114  chmod in.sh
  115  chmod 777 in.sh
  116  ls
  117  ./in.sh
  118  yum search java-11-openjdk
  119  yum search java-11-openjdk
  120  sudo yum install java-11-openjdk-devel
  121  sudo yum install java-11-openjdk-devel
  122  sudo amazon-linux-extras install epel
  123  amazon-linux-extras install epel
  124  sudo yum install java-11-openjdk-devel
  125  sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
  126  sudo yum install -y java-11-openjdk-devel
  127  java --version
  128  java -version
  129  install java
  130  yum install java
  131  java -version
  132  ./in.sh
  133  ls
  134  cd /opt
  135  ls
  136  cd sonarqube
  137  ls
  138  cd conf
  139  ls
  140  cat sonar.properties
  141  ls
  142  cd
  143  cd /opt
  144  ls
  145  cd csonar.properties
  146  cd  sonarqube
  147  ls
  148  cd bin
  149  ls
  150  cd  linux-x86-64
  151  ls
  152  ./ sonar.sh
  153  ./sonar.sh
  154  ./sonar.sh start
  155  cd
  156  useradd sonar
  157  visudo
  158  su - sonar
  159   chown -R sonar:sonar /opt/sonarqube
  160  chmod 775 /opt/sonarqube
  161  su - sonar
  162  history
